name: Reusable Release Workflow

on:
  workflow_call:
    inputs:
      repository:
        required: true
        type: string
      tag:
        required: true
        type: string
      aws_role_arn:
        required: true
        type: string
        description: "The AWS role ARN to use for AWS operations"
    secrets:
      RELENG_GITHUB_TOKEN:
        required: true
      APPLE_SIGNING_KEY_P12:
        required: true
      APPLE_SIGNING_KEY_P12_PASSWORD:
        required: true
      AC_PASSWORD:
        required: true
      AC_PROVIDER:
        required: true

jobs:
  goreleaser:
    runs-on: macos-latest
    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          path: _caller
          repository: ${{ inputs.repository }}
          fetch-depth: 0

      - name: Checkout connector-workflows
        uses: actions/checkout@v4
        with:
          path: _workflows
          repository: ConductorOne/connector-workflows
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Generate gon configs
        env:
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          envsubst < _workflows/.gon-amd64-template.json > _workflows/.gon-amd64.json
          envsubst < _workflows/.gon-arm64-template.json > _workflows/.gon-arm64.json

      - name: Set up Gon
        run: brew tap conductorone/gon && brew install conductorone/gon/gon

      - name: Import Keychain Certs
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_SIGNING_KEY_P12 }}
          p12-password: ${{ secrets.APPLE_SIGNING_KEY_P12_PASSWORD }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          workdir: _caller
          version: "~> v2.5"
          args: release --clean --config ../_workflows/.goreleaser.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.RELENG_GITHUB_TOKEN }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_PROVIDER: ${{ secrets.AC_PROVIDER }}

  goreleaser-docker:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          path: _caller
          repository: ${{ inputs.repository }}
          fetch-depth: 0

      - name: Checkout connector-workflows
        uses: actions/checkout@v4
        with:
          path: _workflows
          repository: ConductorOne/connector-workflows
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.24.x

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.RELENG_GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          workdir: _caller
          version: "~> v2.5"
          args: release --clean --config ../_workflows/.goreleaser.docker.yaml
        env:
          GITHUB_TOKEN: ${{ secrets.RELENG_GITHUB_TOKEN }}

  record-release:
    needs: [goreleaser, goreleaser-docker]
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_arn }}
          aws-region: us-west-2
      - name: Invoke Lambda
        run: |
          TMPFILE=$(mktemp)
          aws lambda invoke \
          --function-name connector-releases-events \
          --payload "{\"repository\":\"${{ inputs.repository }}\", \"tag\":\"${{ inputs.tag }}\"}" \
          --cli-binary-format raw-in-base64-out \
          "$TMPFILE"
          cat "$TMPFILE"
